name: Release to NPM

on:
  push:
    branches: [main]
    paths:
      - 'package.json'

permissions:
  contents: write
  id-token: write

jobs:
  check-version-change:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.changed }}
      new_version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          git checkout HEAD~1 -- package.json 2>/dev/null || echo "First commit"
          PREVIOUS_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          git checkout HEAD -- package.json

          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          fi

  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: check-version-change
    if: needs.check-version-change.outputs.version_changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: npx tsc --noEmit

      - name: Build library
        run: npm run build

      - name: Verify build artifacts
        run: |
          test -f dist/liminal.js || (echo "ES module not found" && exit 1)
          test -f dist/liminal.umd.cjs || (echo "UMD bundle not found" && exit 1)
          test -f dist/style.css || (echo "CSS file not found" && exit 1)
          test -f dist/index.d.ts || (echo "Type declarations not found" && exit 1)

      - name: Build Storybook
        run: npm run build-storybook

  create-tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      tag: ${{ steps.create_tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create and push tag
        id: create_tag
        run: |
          VERSION=$(node -p "require('./package.json').version")
          TAG="v$VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate, create-tag]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build

      - name: Publish to NPM
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-npm, create-tag]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.create-tag.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## Changes in ${{ steps.version.outputs.VERSION }}

            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.

            ## Installation

            ```bash
            npm install liminal@${{ steps.version.outputs.VERSION }}
            ```

            ## NPM Package

            https://www.npmjs.com/package/liminal/v/${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false

  deploy-storybook:
    name: Deploy Storybook to GitHub Pages
    runs-on: ubuntu-latest
    needs: publish-npm
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Storybook
        run: npm run build-storybook

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './storybook-static'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
